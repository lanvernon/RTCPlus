/** \file utilities.h
 *  \brief Constant definitions for utility classes and function definitions
 */

#ifndef scenaryGenerator_utilities_h
#define scenaryGenerator_utilities_h

#include <vector>
#include <map>
#include <set>
#include <stdlib.h>
#include <string.h>
#include "common/LteCommon.h"

using namespace std;


#ifndef PI
#define PI        3.141592653589793
#endif

#ifndef SPEED_OF_LIGHT
#define SPEED_OF_LIGHT 300000000.0
#endif


/*! \typedef EnbId
 *  integer value rapresented antenna's id
 */
typedef unsigned int EnbId;


/*! \enum GraphType
 *  Type of Graph */
/*! \var GraphType::CONFLICT
 *  Conflict Graph */
/*! \var GraphType::CONNECTIVITY
 *  Connectivity Graph */
enum GraphType
{
    CONFLICT,
    CONNECTIVITY
};

/*! \struct InterferenceElem
 *  \brief given an eNb and its #rbs occupation, keeps the amount of interference generated by another eNb with occupation usedRbs
 *  \var usedRbs number of RB used by eNb
 *  \var interference quantity of interference
 */
struct InterferenceElem
{
    unsigned int usedRbs;
    double interference;
public:
    InterferenceElem():usedRbs(0), interference(0){};
};

/*! \struct AllocationNodeElem
 *  \brief stores information about resource blocks allocation and transmission power of an eNb (macro or micro)
 *  \var txPower
 *  \var allocatedRbs
 */

struct AllocationNodeElem
{
    const double * txPower;
    const double * allocatedRbs;
    // this field may be used for efficiency reasons
    // true when I change the allocatedRbs value with a new value
    // false when I try to update the allocatedRbs field with the same value
    // bool changed;;
};

/*! \struct SNRvector
 *  \brief stores information about SNR*/
 /*!  \var SNRvector::id of the sender antenna*/
 /*!  \var SNRvector::SNR value of the SNR*/

struct SNRvector {
    unsigned int id_;   ///\var id_ of the sender antenna
    double value;         ///\var SNR value of the SNR
};

/*! \struct PWRvector
 *  \brief stores information about received power*/
 /*!  \var PWRvector::id of the sender antenna*/
 /*!  \var PWRvector::value value of the received power*/

struct PWRvector {
    unsigned int id_;   ///\var id_ of the sender antenna
    double value;         ///\var value of the received power
};

/*! \struct Edge
 *  \brief stores information about edge
 *  \var mit id of the sender antenna
 *  \var ric id of the receiver antenna 
 *  \var value a double value (-1 if the SNR is calculated on the same antenna)
 */

struct Edge {
    unsigned int mit;
    unsigned int ric;
    double value;
};


/*! \typedef Graph
 *  \brief map containing information about Graph used for connectivity Graph
 */
typedef std::map < unsigned int , Edge > Graph;


/*! \typedef SNRMatrix
 *  \brief map containing the received power, it's composed by Id and a pointer to a SNRvector
 *  antenna with id specified in "first"(unsigned int) experienced a SNR of value "second.SNR" (double)
 *  \var Id contains the identifier of the sender antenna
 *  \var SNRvector pointer to a vector
 */
typedef std::map < unsigned int , SNRvector*> SNRMatrix;

/*! \typedef RecPwrMatrix
 *  \brief map containing the received power, it's composed by Id and a pointer to a SNRvector
 *  antenna with id specified in "first"(unsigned int) experienced a SNR of value "second.SNR" (double)
 *  \var Id contains the identifier of the sender antenna
 *  \var SNRvector pointer to a vector
 */
typedef std::map < unsigned int , PWRvector*> RecPwrMatrix;

/*! \typedef InterferenceMatrix
 *  \brief map containing the interference, it's composed by EnbId and a pointer to an InterferenceElem
 */
typedef std::map < EnbId , InterferenceElem*> InterferenceMatrix;

/*! \typedef InterferenceList
 *  \brief  stores a variable amount of interefence informations generated by the eNb with id "EnbId"
 */
typedef std::map < EnbId , InterferenceElem > InterferenceList;

/*! \typedef FlowList
 *  \brief  stores information about flows of a certain antenna
 */

/**
 * Function that convert an index to a MAC node ID.
 * @param index Index of the node to convert
 */
MacNodeId indexToNodeId(int index);

/**
 * Function that convert an index to a MAC node ID.
 * @param nodeId ID of the node to convert
 */
int nodeIdToIndex(MacNodeId nodeId);

#endif
